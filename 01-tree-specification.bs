<pre class='metadata'>
Title: The TREE hypermedia specification
Shortname: TREE
Level: 1
Status: w3c/CG-DRAFT
Markup Shorthands: markdown yes
Group: TREE hypermedia community group
URL: https://w3id.org/tree/specification
Repository: https://github.com/treecg/specification
Mailing List: public-treecg@w3.org
Mailing List Archives: https://lists.w3.org/Archives/Public/public-treecg/
Editor: Pieter Colpaert, https://pietercolpaert.be
Abstract:
    TREE hypermedia describes the pagination of a collection of entity descriptions.
    It allows clients to follow their nose through a search tree based information structure.
</pre>

# Overview # {#overview}

<img src="https://docs.google.com/drawings/d/e/2PACX-1vTTCjBkBum1J4xgbg0oZJaD_H05dpZxhL6jrp1yzqoIsYw5EOa-7D24No_rfEyTipq1rLb-_tPTEYV0/pub?w=1093&amp;h=546" alt="An overview of the TREE specification with the TREE collection, a reference to the first focus node of its members, and the relations to other nodes from the current node.">
<div class="informative">
The TREE specification introduces these core concepts:
 * a <code>tree:Collection</code> is a set of members. It typically has these properties when described in a node:
     - <code>tree:member</code> points at the first focus node from which to retrieve and extract all quads of a member
     - <code>tree:view</code> points to the <code>tree:Node</code> you’re currently visiting
     - <code>tree:shape</code> indicates the [[!SHACL]] shape (exactly one) to which each member in the collection adheres
 * a <code>tree:Node</code>: is a page in the search tree
     - `tree:relation` points at relations to other node
     - a <code>tree:search</code> describes a search form that allows an agent to jump to a specific <code>tree:Node</code> in the (sub)tree from here.
     - <code>tree:viewDescription</code> links a description of (such as a <code>tree:SearchTree</code>, a `dcat:Distribution`, a `dcat:DataService`)
 * a <code>tree:Relation</code> is a relation from one node to another. An extension of this class indicates a specific type of relation (e.g., a <code>tree:GreaterThanRelation</code>). A relation typically has these properties:
     - a <code>tree:node</code> the URL of the other node
     - a <code>tree:path</code> indicating to which of the members' properties this relation applies
     - a <code>tree:value</code> indicating a value constraint on the members' values
     - a <code>tree:remainingItems</code> defining how many members can be reached when following this relation
 * a <code>tree:SearchTree</code> is this collection of nodes. The SearchTree can be double typed with the root `tree:Node`, but can also be linked through the property `tree:viewDescription`.

A simple collection can be created as illustrated in the following example:
</div>

<div class="example">
    ```turtle
    ex:Collection1 a tree:Collection;
                rdfs:label "A Collection of subjects"@en;
                tree:member ex:Subject1, ex:Subject2 .

    ex:Subject1 a ex:Subject ;
                rdfs:label "Subject 1" ;
                ex:value 1 .

    ex:Subject2 a ex:Subject ;
                rdfs:label "Subject 2" ;
                ex:value 2 .
    ```
</div>

From the moment this collection of members grows too large for one page, 
a pagination needs to be created in which an initial set of members can be found through the rootnode, 
and more members can be found by interpreting the TREE hypermedia controls. 
This is illustrated in the next example:

<div class="example">
    ```turtle
    > HTTP GET https://example.org/Node1

    ex:Collection1 a tree:Collection;
                tree:view ex:Node1 ;
                tree:member ex:Subject1, ex:Subject2 .

    ex:Node1 a tree:Node ;
            tree:relation ex:R1,ex:R2 .

    ex:R1 a tree:GreaterThanOrEqualToRelation ;
        tree:node ex:Node3 ; # This is the URL of another page
        tree:value 3;
        tree:path ex:value .

    ex:R1 a tree:LessThanRelation ; # This is very useful for a client that is looking for a value 10 or greater
        tree:node ex:Node3 ;
        tree:value 10;
        tree:remainingItems 7 ;
        tree:path ex:value .

    ex:R2 a tree:GreaterThanOrEqualToRelation ;
        tree:node ex:Node4 ;
        tree:value 10;
        tree:remainingItems 10 ;
        tree:path ex:value .

    ex:Subject1 a ex:Subject ;
                rdfs:label "Subject 1" ;
                ex:value 1 .

    ex:Subject2 a ex:Subject ;
                rdfs:label "Subject 2" ;
                ex:value 2 .
    ```
</div>

# Initialization # {#init}

A client SHOULD be initiated using a URL. 
The client MUST dereference the URL, which will result in a set of [[!rdf-concepts]] triples or quads.
When the URL after all redirects, is used in a triple <code>?c tree:view <> .</code>, a client MUST assume the URL after redirects is an identifier of the intended root node of the collection in `?c`.

Note: Dereferencing in this specification also means parsing the RDF triples or quads from the HTTP response. TREE does not limit the content-types that can be used to represent RDF triples. Client developers should do a best-effort for their community.

If there is no such triple, then the client MUST check whether the URL before redirects (`E`) has been used in a pattern `<E> tree:view ?N.` where there’s exactly one `?N`, then the algorithm MUST return `?N` as the rootnode and `E` as the collection.

The client then MUST dereference the identified rootnode (if it did not do that already) and merge those quads with the already found quads.
It now MUST look for a potential search forms that MAY be linked, either i) on top of the rootnode, either ii) on top of the entity linked through `tree:viewDescription`, or iii) on the `tree:SearchTree` using `tree:search`.

The resulting collection IRI `C`, the rootnode IRI `R`, list of already visited pages `H` (and optionally their time to live), current quads `Q` and search forms `S`.

In case it is not done using an unambiguous URL, clients MAY implement the report on [Discovery and Context Information (work in progress)](https://w3id.org/tree/specification/discovery).
This report also explains how clients MAY implement support for extracting context information such as provenance, contact points, etc.

Note: Having an identifier for the collection has become mandatory: without it you can otherwise not define completeness.

# The member extraction algorithm # {#member-extraction-algorithm}

TODO: review motivation

<div class="informative">
Thanks to the member extraction algorithm, a data publisher can define their members in different ways:
    1. As in the examples above: all quads with the object of the <code>tree:member</code> quads as a subject (and recursively the quads of their blank nodes) are by default included (see also [[!CBD]]), except when they would explicitely not be included in case 3, when the shape would be closed.
    2. Out of band / in band:
        - when no quads of a member have been found, the member will be dereferenced. This allows to publish the member on a separate page.
        - part of the member can be maintained elsewhere when a shape is defined (see 3)
    3. By defining a more complex shape with <code>tree:shape</code>, also nested entities can be included in the member
    4. By putting the triples in a named graph of the object of <code>tree:member</code>, all these triples will be matched. 
</div>

Depending on the goals of the client, it MAY implement the member extraction algorithm.
It MUST implement the algorithm in case the goal is to find the complete and finite set of quads that are part of a member as intended by the data publisher.
The method used withun TREE is combination of Concise Bounded Descriptions, named graphs and the topology of a shape (deducted from the `tree:shape`).
The full algorithm is specificied in the [shape topologies](https://w3id.org/tree/specification/shape-topologies) report.

# Traversing the search tree # {#traversing}

After dereferencing a `tree:Node`, a client MUST extract all (zero or more) `tree:Relation` descriptions from the page.
This can be done by searching for `<> tree:relation ?R` triples.

A client MUST follow the object of the relation’s <code>?R tree:node ?object</code> triple, unless the client is able to prune the branch reachable from that node (see further).

A client MAY also extract the <code>tree:Relation</code>’s <code>tree:remainingItems</code> if it exists.
If it does, it will be an integer indicating the remaining items to be found after dereferencing the node.

When traversing, a client SHOULD detect faulty search trees by keeping a list of already visited pages.

When dereferencing the object of a <code>tree:node</code> triple, the client MUST follow redirects.

Note: Allowing redirects allows servers to rebalance their search trees over time.

A client MAY assume completeness of members intended by the search tree when it derefenced all node links.

# Pruning branches # {#relationsubclasses}

In search trees, not commonly the `tree:Relation` will be used as the type, but more commonly it will be one of its subclasses.
For partial string matching, `tree:PrefixRelation`, `tree:SubstringRelation`, and `tree:SuffixRelation` exist.
For comparing various datatypes, `tree:GreaterThanRelation`, `tree:GreaterThanOrEqualToRelation`, `tree:LessThanRelation`, `tree:LessThanOrEqualToRelation`, `tree:EqualToRelation`, and `tree:NotEqualToRelation` exist.
Finally, for geospatial trees, `tree:GeospatiallyContainsRelation` exists. 

A client decides, based on their own tasks, what relations are important to implement.
Each relation is a comparator function that helps deciding whether or not the subtree reachable from the `tree:node` link can be pruned.
All relation comparator functions to the same `tree:node` need to be evaluated using a logical AND.
As arguments, it this function takes:
 1. The left-hand: what the members on the linked node will contain w.r.t. the literals reachable from the `tree:path`
 2. The operator: decided by the type of the relation and the datatype or node type of the `tree:value` triple’s object.
 3. The right-hand: the `tree:value` triple’s object.

If the client comes across a relation subclass it did not code against, it MUST return `true`.

Subclasses of <code>tree:Relation</code> commonly will use the <code>tree:path</code> to indicate the path from the member to the object on which the <code>tree:Relation</code> applies. For the different ways to express or handle a <code>tree:path</code>, we refer to [2.3.1 in the shacl specification](https://www.w3.org/TR/shacl/#x2.3.1-shacl-property-paths). All possible combinations of e.g., <code>shacl:alternativePath</code>, <code>shacl:inversePath</code> or <code>shacl:inLanguage</code> in the SHACL spec can be used. When <code>shacl:alternativePath</code> is used, the order in the list will define the importance of the order when evaluating the <code>tree:Relation</code>. 
The result of the evaluation of the <code>tree:path</code>, is the value that must be compared to the <code>tree:value</code>.
When multiple results from the path are found, they need to be interpreted in the function using a logical OR.

The target object of a <code>tree:path</code> SHOULD be materialized in the current Node document, but when it is not, the object MAY be considered implicit on the condition both <code>tree:path</code> and <code>tree:member</code> are defined.
In contrast to <code>sh:path</code>, a <code>tree:path</code> MAY refer to an implicit property and may not be materialized in the current response. This may break SPARQL processors that did not yet come across the object before in their query plan. However, the tree may still be useful for query processors that, for example, prioritize queries according to the user’s location, and first download nodes that are nearby the user. Therefore, the materialized location of the object is not needed. While not recommended, possible heuristics could try to infer the data, could try to fetch it through another <code>tree:Collection</code>, or retrieve it using URI dereferencing.
Wildcards in the paths (i.e. `sh:zeroOrMorePath`) however do not trigger any further look-ups.

When the type given for a certain Relation is <code>tree:Relation</code>, then the client MUST dereference the node if the client needs more results.
While this may seem useless, this more or less has similar semantics to a next page link.

## Comparing strings ## {#strings}

String values have three specific type of relations: the <code>tree:PrefixRelation</code>, the <code>tree:SubstringRelation</code> and the <code>tree:SuffixRelation</code>.

Note: We experimented with server-chosen locales such that <code>ça suffit</code> can also be found when following a <code>tree:PrefixRelation</code> with a <code>tree:value "c"</code> (which at this moment is not supported). That would require an understanding of locales, and [browser/JavaScript support for locales is too low to be useful at this point](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation).

Also the comparator relations such as <code>tree:GreaterThanRelation</code> can be used.
The strings MUST then be compared according to *case sensitive unicode ordering*.

When a <code>tree:path</code> is defined, mind that you also may have to check the language of the element using the property <code>shacl:inLanguage</code> 
More languages MAY be set.
When no language is set, all strings are compared.

Note: If you want to have one resource containing both <code>e</code> and <code>é</code> as a prefix, you will have to create multiple relations to the same <code>tree:Node</code>.

## Comparing named nodes ## {#named-nodes}

When using comparator relations such as <code>tree:GreaterThanRelation</code>, named nodes must be compared as defined in the [ORDER BY section of the SPARQL specification](https://www.w3.org/TR/sparql11-query/#modOrderBy).

## Comparing geospatial features ## {#geospatial}

The <code>tree:GeospatiallyContainsRelation</code> is the relation than can be used to express all further members will be contained within a geospatial region defined by the WKT String in the <code>tree:value</code>.

When using <code>tree:GeospatiallyContainsRelation</code>, the <code>tree:path</code> MUST refer to a literal containing a WKT string, such as <code>geosparql:asWKT</code>.

## Comparing time literals ## {#time}

When using relations such as <code>tree:LessThanRelation</code> or <code>tree:GreaterThanRelation</code>, the time literals need to be compared according to these 3 possible data types: <code>xsd:date</code>, <code>xsd:dateTime</code> or <code>xsd:dateTimeStamp</code>.

# Search forms # {#searching}

Searching through a TREE will allow you to immediately jump to the right <code>tree:Node</code>.
TREE relies on the [Hydra search specification](http://www.hydra-cg.com/spec/latest/core/#hydra:search) for its search forms.
It does however extend Hydra with specific search properties (<code>hydra:IriTemplate</code>) for different types of search forms, and searches starting from a <code>tree:ViewDescription</code>, to which the search form is linked with <code>tree:search</code>.
The behaviour of the search form fully depends on the specific property, for which TREE introduces a couple of specific properties:

## Geospatial XYZ tiles search form ## {#xyztiles}

Three properties allow to specify a geospatial XYZ tiles template (also known as slippy maps).
 1. <code>tree:longitudeTile</code> describes the X value
 2. <code>tree:latitudeTile</code> descrbes the Y value
 3. <code>tree:zoom</code> describes the zoom level

All properties expect positive integers.

<div class="example">
    ```turtle
    <https://tiles.openplanner.team/#LatestCollection> a tree:Collection ;
        dcterms:title "A prototype tree:Collection for Linked OpenStreetMap’s roads"@en .
    <https://tiles.openplanner.team/planet/> a tree:SearchTree ;
        
        tree:search [
            a hydra:IriTemplate ;
            hydra:template "https://tiles.openplanner.team/planet/20201103-095900/{z}/{x}/{y}" ;
            hydra:variableRepresentation hydra:BasicRepresentation ;
            hydra:mapping [
                a hydra:IriTemplateMapping ;
                hydra:variable "x";
                hydra:property tree:longitudeTile;
                hydra:required true
            ],[
                a hydra:IriTemplateMapping ;
                hydra:variable "y";
                hydra:property tree:latitudeTile;
                hydra:required true
            ],[
                a hydra:IriTemplateMapping ;
                hydra:variable "z";
                hydra:property tree:zoom;
                hydra:required true
            ]
        ] .   
    ```
</div>

This search form describes a specific search form that uses a quad tree. The zoom level describes the depth, the longitudeTile and latitudeTile describe the x and y index of the pagination. (e.g., on zoom level 0, there’s 1 tile, on zoom level 1, there are 4 tiles, etc.).

## Searching through a list of objects ordered by time ## {#timesearch}

Same as the previous example but with the predicate <code>tree:timeQuery</code> expecting an <code>xsd:dateTime</code>.
This time however, when the page itself does not exist, a redirect is doing to happen to the page containing the timestamp.
A <code>tree:path</code> can indicate the time predicate which is intended.

<div class="example">
    ```turtle
    <https://example.org/#Collection> a tree:Collection ;
        dcterms:title "An example collection with a time search view"@en ;
        tree:view <https://example.org/Node1> .

    <https://example.org/Node1> a tree:Node ;
        tree:search [
            a hydra:IriTemplate ;
            hydra:template "https://example.org/{generatedAt}" ;
            hydra:variableRepresentation hydra:BasicRepresentation ;
            hydra:mapping [
                a hydra:IriTemplateMapping ;
                hydra:variable "generatedAt";
                tree:path prov:generatedAtTime;
                hydra:property tree:timeQuery;
                hydra:required true
            ]
        ] .
    ```
</div>

# Imports # {#imports}

A <code>tree:import</code> can be defined on multiple levels. When defined as part of a <code>tree:Node</code>, this document always needs to be fetched when processing this Node.
When defined as part of the <code>tree:Relation</code>, one MUST fetch the import when the relation needs to be correctly evaluated (e.g., the resulting page contains elements without materialized WKT strings, which however can be fetched from the import).
When importing a file, no hypermedia relations will be followed from that import in order to get more data.

A <code>tree:importStream</code> can also be defined for providing a pubsub interface for subscribing to real-time updates. The object SHOULD be a [[!websockets]] or Server-Sent Events ([[!eventsource]]).

Instead of <code>tree:import</code>, one can also use <code>tree:conditionalImport</code> which links to an object of the type <code>tree:ConditionalImport</code> with these properties:

 * <code>tree:import</code> with a link to the page to import, or a <code>tree:importStream</code> with a pubsub stream to import (optionally)
 * <code>tree:path</code> with a property path that indicates the resource that elements in the imported resource contain

Note: imports are powerful to keep recurring objects in a separate, more cacheable, resource.

No hypermedia controls in the body MUST be interpreted in the imported resource and the object must be fully contained within that information resource.

On the resources to import, Memento [[!RFC7089]] controls MAY be provided for historic versions.

# Compatibility # {#compatibility}

## Hydra ## {#hydra}

A <code>tree:Collection</code> is compatible with the [Hydra Collections specification](https://www.hydra-cg.com/spec/latest/core/#collections). However, instead of <code>hydra:view</code>, we use <code>tree:view</code> and do not link to a <code>hydra:PartialCollectionView</code> but to a <code>tree:Node</code>.
A <code>hydra:Collection</code> can thus also be extended with a <code>tree:shape</code> and <code>tree:view</code>.
When this is done, also <code>hydra:member</code> can be used instead of <code>tree:member</code>.

<code>hydra:totalItems</code> can be used to indicate the total amount of elements in the collection.
Hydra paging controls such as <code>hydra:next</code> and <code>hydra:previous</code> are semantically equivalent to a <code>tree:Relation</code> element that only contains a <code>tree:node</code> property.

## Activity Streams 2.0 ## {#activitystreams}

A <code>tree:Collection</code> is also compatible with [[!activitystreams-core]]’s specification of [paged collections](https://www.w3.org/TR/activitystreams-core/#collections).
Instead of <code>dcterms:isPartOf</code>, also <code>as:partOf</code> can be used to indicate that the current page is part of the full collection.
While Hydra and TREE link to the members of the collection by using the specific collection as a subject, Activity Streams 2.0 (AS) indicates a member starting from the page URL.
Therefore, when using AS collections, a client implementation should gather the members from the <code>tree:Node</code> or <code>as:CollectionPage</code> instead.

<code>as:totalItems</code> can be used to indicate the total amount of elements in the collection.

AS paging controls such as <code>as:next</code>and <code>as:previous</code> are semantically equivalent to a <code>tree:Relation</code> element that only contains a <code>tree:node</code> property.

## LDP Containers ## {#ldp}

In [[!LDP]], the <code>tree:view</code> can be applied on top of the <code>ldp:Container</code> instance.
Members can be found through <code>ldp:contains</code>, and/or through the indirect <code>ldp:membershipResource</code> and <code>ldp:hasMemberRelation</code> or <code>ldp:isMemberOfRelation</code> construct.

If this container is paged by the [[!ldp-paging]] (chapter 7) spec, then this MUST be ignored.

If there is an ordering, this MUST be ignored by TREE clients (the relations contain all necessary information for pruning).

## Shape trees ## {#shapetrees}

[The Shape Trees specification](https://shapetrees.org/TR/specification/) is specifically built to work within existing ecosystems.
As it was conceived to interoperate with LDP, the term Container in the Shape Trees spec can also be interpreted as a <code>tree:Collection</code>.
Shape Trees can help in the source selection of what specific <code>tree:Collection</code> to pick for your goal, and may add hierarchies to a set of <code>tree:Collection</code>s.
A client MAY infer a <code>tree:shape</code> of the collection through the <code>st:validatedBy</code> property of the Shapes Tree.

An example of a collection using Shape Tree terms. In this example a sensor with some observations is validated by using a [Shape Expressions](http://shex.io/shex-semantics/) (ShEx) file.

<div class="example">
    ```turtle
    @prefix sosa: <http://www.w3.org/ns/sosa/> .
    @prefix om: <http://www.ontology-of-units-of-measure.org/resource/om-2/> .
    @prefix ldp: <http://www.w3.org/ns/ldp#> .

    <2021.ttl#Collection> a ldp:Container; 
        st:validatedBy <Sensor.shex#Sensor>;
        tree:member <sensor1>, <sensor2> .

    <sensor1>
        a sosa:Sensor;
        sosa:madeObservation
            <sensor1-observation1>,
            <sensor1-observation2>;
        sosa:observes om:Temperature .

    <sensor1-observation1>
        a sosa:Observation;
        sosa:observedProperty om:Temperature;
        sosa:madeBySensor <sensor1>;
        sosa:hasResult <result1>;
        sosa:resultTime "2020-08-25T07:05:31Z"^^xsd:dateTime .

    <result1> a om:Measure; 
        om:hasValue "22"^^xsd:float; 
        om:hasUnit om:degreeCelsius .

    <sensor1-observation2>
        a sosa:Observation;
        sosa:observedProperty om:Temperature;
        sosa:madeBySensor <sensor1>;
        sosa:hasResult <result2>;
        sosa:resultTime "2020-08-25T07:05:32Z"^^xsd:dateTime .

    <result2> a om:Measure; 
        om:hasValue "22"^^xsd:float; 
        om:hasUnit om:degreeCelsius .

    <sensor2>
        a sosa:Sensor;
        sosa:observes om:Temperature .
    ```

    And its corresponding ShEx file (called Sensor.shex)

    ```shex
    PREFIX sosa: <http://www.w3.org/ns/sosa/>
    PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
    PREFIX om: <http://www.ontology-of-units-of-measure.org/resource/om-2/>
    PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>

    <#Sensor> {
        a [sosa:Sensor] ;
        sosa:observes [om:Temperature]  ; 
        sosa:madeObservation @<#TemperatureObservation> * 
    }

    <#TemperatureObservation> {
        a [sosa:Observation] ;
        sosa:resultTime xsd:dateTime ;
        sosa:madeBySensor @<#Sensor> ? ;
        sosa:observedProperty [om:Temperature];
        sosa:hasResult @<#TemperatureResult> 
    }

    <#TemperatureResult> { 
        a [om:Measure];
        om:hasValue xsd:float ;
        om:hasUnit [om:degreeCelsius]
    }
    ```
</div>

<pre class=include>path: vocabulary.md</pre>
