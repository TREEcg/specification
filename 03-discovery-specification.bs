<pre class='metadata'>
Title: TREE Discovery and Context Information
Shortname: TREEDiscovery
Level: 1
Status: w3c/CG-DRAFT
Markup Shorthands: markdown yes
Group: TREE hypermedia community group
URL: https://w3id.org/tree/specification/discovery
Repository: https://github.com/treecg/specification
Mailing List: public-treecg@w3.org
Mailing List Archives: https://lists.w3.org/Archives/Public/public-treecg/
Editor: Pieter Colpaert, https://pietercolpaert.be
Abstract:
    This specification defines how a client can find specific search trees of interest, as well as list the context information.
</pre>

# The overview # {#overview}

A <code>tree:Collection</code> is a subclass of <code>dcat:Dataset</code> ([[!vocab-dcat-3]]).
The specialization being that this particular dataset is a collection of _members_.

A <code>tree:SearchTree</code> is a subClassOf <code>dcat:Distribution</code>.
The specialization being that it uses the main TREE specification to publish a search tree.

A node from which all other nodes can be found is a `tree:RootNode`, which MAY be explicitely typed as such.

Note: The `tree:SearchTree` and the `tree:RootNode` MAY be identified by the same IRI when no disambiguation is needed.

A TREE client MUST be provided with a URL to start from, which we call the _entrypoint_.

# Initializing a client with a url # {#starting-from}

The goal of the client is to understand what `tree:Collection` it is using, and to find a `tree:RootNode` or search form to start the traversal phase from.

```
IN: E: a URL of the entrypoint
OUT: N: tree:RootNode IRI and/or S: search form
 ```

The client MUST dereference the URL, which will result in a set of quads.
When the URL given to the TREE client, after all redirects, is used in a triple <code>ex:C tree:view <> .</code>, a client MUST assume the URL after redirects (`E'`) is an identifier of the intended `tree:RootNode` of the collection `ex:C`.
The client MUST check for this `tree:view` property and return the result of the discovery algorithm with `<> → N`.

If there is no such triple, then the client MUST check whether the URL before redirects (`E`)  has been used in one of the following patterns:
 * `E tree:view ?N.` where there’s exactly one `?N`, then the algorithm MUST return `?N → N`.
 * `E tree:rootNode ?N ; tree:search ?S .` then the algorithm MUST return `?N → N` and `?S → S`.
 * `?DS dcat:servesDataset E ; dcat:endpointURL ?U` or `E dcat:endpointURL ?U`, then the algorithm MUST repeat the algorithm with `?U` as the entrypoint.

Note: When data about the dataset, data service or search tree is found, it is a good idea to also pass this on to the client.

## tree:Collection ## {#collection}

In order to prioritize a specific view link, the relations and search forms in the entry nodes can be studied for their relation types, path or remaining items.
The class <code>tree:ViewDescription</code> indicates a specific TREE structure on a <code>tree:Collection</code>.
Through the property <code>tree:viewDescription</code> a <code>tree:Node</code> can link to an entity that describes the view, and can be reused in data portals as the <code>dcat:DataService</code>.

<div class="example">
    ```turtle
    ## What can be found in a tree:Node
    ex:N1 a tree:Node ;
      tree:viewDescription ex:View1 .
      
    ex:C1 a tree:Collection ;
      tree:view ex:N1 .

    ## What can be found on a data portal
    ex:C1 a dcat:Dataset .
    ex:View1 a tree:ViewDescription, dcat:DataService ;
      dcat:endpointURL ex:N1 ; # The entry point that can be advertised in a data portal
      dcat:servesDataset ex:C1 .
    ```
</div>

When there is no <code>tree:viewDescription</code> property in this page, a client either already discovered the description of this view in an earlier <code>tree:Node</code>, either the current <code>tree:Node</code> is implicitly the ViewDescription. Therefore, when the property path <code>tree:view → tree:viewDescription</code> does not yield a result, the view properties MUST be extracted from the object of the <code>tree:view</code> triple.
A <code>tree:Node</code> can also be double typed as the <code>tree:ViewDescription</code>. A client must thus check for ViewDescriptions on both the current node without the <code>tree:viewDescription</code> qualification, as on the current node with the <code>tree:viewDescription</code> link.

## dcat:Catalog ## {#collection}

When multiple collections are found by a client, it can choose to prune the collections based on the <code>tree:shape</code> property.
Therefore a data publisher SHOULD annotate a <code>tree:Collection</code> instance with a SHACL shape.
The <code>tree:shape</code> points to a SHACL description of the shape (<code>sh:NodeShape</code>).

Note: the shape can be a blank node, or a named node on which you should follow your nose when it is defined at a different HTTP URL.

# Context data # {#context}

Context information is important to understand who the creator of a certain dataset is, when it was last changed, what other datasets it was derived from, etc.

TODO

## DCAT and dcterms ## {#context-dcat}

## Provenance ## {#context-prov}

## Linked Data Event Streams ## {#context-ldes}

LDES (https://w3id.org/ldes/specification) is a way to evolve search trees in a consistent way. It defines every member as immutable, and a collection as append-only.
Therefore, one can make sure to only process each member once.
Extra terms are added, such as the concept of an EventStream, retention policies and a timestampPath. 
